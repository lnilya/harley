from typing import Dict, List, Tuple, Optional



class DataAtom:
    #Instance of the module used to generate the data
    owner: 'ModuleBase'
    #Data generated by a module to generate data
    data:any
    #Parameters passed to module to generate the data
    parameters:any


class SessionData:
    """
        Session Data is a datastorage for all data a module provides as output
        Data can be anything from images, to complex classes or trained models.
        Modules are instructed by JS which data to use as inputs, also JS can asynchroniously
        load this data if it needs it, by contacting the responsive module
    """


    __data: Dict[str, DataAtom]  # data key -> data, parameters
    log: bool = True

    def __init__(self):
        self.__data = {}
        print("Session Data Created")


    def printAllData(self):
        for i,d in enumerate(self.__data.items()):
            print('(%s) from Module %s' % (i,d.owner.id))

    def checkKey(self, key: str):
        if key not in self.__data:
            raise RuntimeError('Data Key "%s" does not exist in Session' % key)

    # Called to indicate that a module has generated some data that is now available
    def onDataAdded(self, key: str, module: 'ModuleBase', data:any, params:any):
        newData = False
        if key not in self.__data:
            newData = True
            self.__data[key] = DataAtom()

        self.__data[key].data = data
        self.__data[key].parameters = params
        self.__data[key].owner = module

        if self.log:
            if newData:
                print('[SessionData]: Added data "%s" from module %s'%(key,module.id))
            else:
                print('[SessionData]: Replced data "%s" from module %s'%(key,module.id))

    def removeData(self, key: str):
        """Removes a key from store, so it can't be used anymore."""
        if key not in self.__data: return

        if self.log:
            print('[SessionData]: Removed data "%s" from module %s' % (key,self.__data[key].owner.id))

        self.__data.pop(key)

    # Gets raw data and parameters as whatever it was stored. This is for py->py module communication
    def getData(self, key: str) -> any:
        if key not in self.__data: return None
        return self.__data[key].data

    # Gets raw data and parameters as whatever it was stored. This is for py->py module communication
    def getParams(self, key: str) -> Optional[Dict]:
        if key not in self.__data: return None
        return self.__data[key].parameters